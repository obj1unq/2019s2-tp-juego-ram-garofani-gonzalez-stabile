import wollok.game.*
import niveles.*
import objetos.npcs.*
import objetos.universe.*
import objetos.players.*
import objetos.objects.*
import directions.*
describe "RaM tests (muy describe)"{
	fixture {
	    game.width(13)
	    game.height(14)
	}
	test "omniverse current is 1"{
	    assert.equals(1, omniverse.current())
	}
	test "omniverse tiene 13 de ancho y 13 de alto"{
	    assert.equals(13, omniverse.ancho()) 
	    assert.equals(13, omniverse.alto()) 
	}
	test "omniverse 0,0,1 es 0,0 con multiverse 1 en current"{
		omniverse.current(1)
		assert.equals(game.at(0,0), omniverse.position(game.at(0,0), 1))
	}
	test "omniverse 13,13,0 es 0,0 con multiverse 1 current"{
	    omniverse.current(1)
	    assert.equals(game.at(0,0), omniverse.position(game.at(13,13), 0))
	}
	test "omniverse 12,12,2 es 25,25 con multiverse 1 en current"{
		omniverse.current(1)
		assert.equals(game.at(25,25), omniverse.position(game.at(12,12), 2))
	}
	test "omniverse 3,7,2 es 3,7 con multiverse 2 en current"{
		omniverse.current(2)
		assert.equals(game.at(3,7), omniverse.position(game.at(3,7), 2))
	}
	test "omniverse 3,7,3 es 16,21 con multiverso 2 en current"{
		omniverse.current(2)
		assert.equals(game.at(16,20), omniverse.position(game.at(3,7), 3))
	}
	test "omniverse 3,7,0 es -10,-6 con multiverso 1 current"{
		omniverse.current(1)
		assert.equals(game.at(-10,-6), omniverse.position(game.at(3,7), 0))
	}
	test "omniverse 3,7,0 es -62,-58 con multiverso 5 current"{
	    omniverse.current(5)
	    assert.equals(game.at(-62,-58), omniverse.position(game.at(3,7), 0))
	}
	test "rick esta en el universo visible"{
	    omniverse.current(1)
	    //rick.oposition(7,2, omniverse.current())
	    rick.position(game.at(7,2))
	    rick.multiverse(omniverse.current())
	    assert.equals(game.at(7,2), rick.position())
	}
	test "rick esta en un universo paralelo a 'izquierda' :D "{
	    omniverse.current(2)
	    rick.position(game.at(7,2))
	    rick.multiverse(1)
	    assert.equals(game.at(-6,-11), rick.position())
	}
	test "rick esta en un universo paralelo a 'derecha' ;P "{
	    omniverse.current(2)
	    rick.position(game.at(7,2))
	    rick.multiverse(3)
	    assert.equals(game.at(20,15), rick.position())
	}
	
	test "Se crea un portal y hay dos portales en el omniverse"{
		niveles.catalogo().add(new Nivel(
		 						fondo = new Fondo(mposition = game.origin(), multiverse = 0, image = "assets/ram-fondo3.png"),
		  						objetos = [ ]  ))
	    omniverse.current(0)
	    portalgun.trigger(3,up)
	    assert.that(game.allVisuals().all{visual => visual.isPortal()})
	    assert.equals(2, game.allVisuals().size())
	}
	
	test "Se crea un portal y rick pasa por el apareciondo en el otro universo"{
		const nroMultiversoOrigen = 1
		const nroMultiversoDestino = 3
		const position = game.at(3, 7)
	
		game.clear()
		omniverse.current(nroMultiversoOrigen)
		portalgun.position(omniverse.position(position, nroMultiversoOrigen))
	    game.addVisual(rick)
	    game.addVisual(portalgun)
		rick.position(omniverse.position(position, nroMultiversoOrigen))
		assert.equals(rick.position(),portalgun.position())
		rick.grabed(portalgun)		
		assert.equals(game.colliders(rick).find{visual => visual.isCollectable()},portalgun)
		rick.trigger(nroMultiversoDestino)
		assert.equals(omniverse.position(position, nroMultiversoOrigen),  rick.position())
		assert.equals(2, game.allVisuals().filter{obj => obj.isPortal()}.size() )
		rick.moveTo(rick.direction())
		assert.notEquals(omniverse.position(position, nroMultiversoDestino), rick.position())
		rick.travel()
		assert.equals(rick.position(), portalgun.position())
	}

	test "Posicion fuera de los limites por derecha"{
		assert.that(niveles.estaFueraDeLosLimites(game.at(15,0)))
	}
	
	test "Posicion fuera de los limites por izquierda"{
		assert.that(niveles.estaFueraDeLosLimites(game.at(-3,0)))
	}
	
	test "Posicion fuera de los limites por arriba"{
		assert.that(niveles.estaFueraDeLosLimites(game.at(8,18)))
	}
	
	test "Posicion fuera de los limites por abajo"{
		assert.that(niveles.estaFueraDeLosLimites(game.at(8,-3)))
	}
	
	test "Posicion dentro de los limites"{
		assert.notThat(niveles.estaFueraDeLosLimites(game.at(7,7)))
	}
	
	test "Esta en zona prohibida"{
		omniverse.current(3)
		assert.that(niveles.esZonaProhibida(game.at(6,1)))
	}
	
	test "No esta en zona prohibida"{
		assert.notThat(niveles.esZonaProhibida(game.at(10,3)))
	}
}
